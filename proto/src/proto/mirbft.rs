// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mirbft.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message oneof groups
    pub Type: ::std::option::Option<Message_oneof_Type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Message_oneof_Type {
    proposal(Proposal),
    forward(Forward),
    preprepare(Preprepare),
    prepare(Prepare),
    commit(Commit),
    checkpoint(Checkpoint),
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .proto.Proposal proposal = 1;


    pub fn get_proposal(&self) -> &Proposal {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::proposal(ref v)) => v,
            _ => Proposal::default_instance(),
        }
    }
    pub fn clear_proposal(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_proposal(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::proposal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proposal(&mut self, v: Proposal) {
        self.Type = ::std::option::Option::Some(Message_oneof_Type::proposal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proposal(&mut self) -> &mut Proposal {
        if let ::std::option::Option::Some(Message_oneof_Type::proposal(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(Message_oneof_Type::proposal(Proposal::new()));
        }
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::proposal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proposal(&mut self) -> Proposal {
        if self.has_proposal() {
            match self.Type.take() {
                ::std::option::Option::Some(Message_oneof_Type::proposal(v)) => v,
                _ => panic!(),
            }
        } else {
            Proposal::new()
        }
    }

    // .proto.Forward forward = 2;


    pub fn get_forward(&self) -> &Forward {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::forward(ref v)) => v,
            _ => Forward::default_instance(),
        }
    }
    pub fn clear_forward(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_forward(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::forward(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_forward(&mut self, v: Forward) {
        self.Type = ::std::option::Option::Some(Message_oneof_Type::forward(v))
    }

    // Mutable pointer to the field.
    pub fn mut_forward(&mut self) -> &mut Forward {
        if let ::std::option::Option::Some(Message_oneof_Type::forward(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(Message_oneof_Type::forward(Forward::new()));
        }
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::forward(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_forward(&mut self) -> Forward {
        if self.has_forward() {
            match self.Type.take() {
                ::std::option::Option::Some(Message_oneof_Type::forward(v)) => v,
                _ => panic!(),
            }
        } else {
            Forward::new()
        }
    }

    // .proto.Preprepare preprepare = 3;


    pub fn get_preprepare(&self) -> &Preprepare {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::preprepare(ref v)) => v,
            _ => Preprepare::default_instance(),
        }
    }
    pub fn clear_preprepare(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_preprepare(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::preprepare(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_preprepare(&mut self, v: Preprepare) {
        self.Type = ::std::option::Option::Some(Message_oneof_Type::preprepare(v))
    }

    // Mutable pointer to the field.
    pub fn mut_preprepare(&mut self) -> &mut Preprepare {
        if let ::std::option::Option::Some(Message_oneof_Type::preprepare(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(Message_oneof_Type::preprepare(Preprepare::new()));
        }
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::preprepare(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_preprepare(&mut self) -> Preprepare {
        if self.has_preprepare() {
            match self.Type.take() {
                ::std::option::Option::Some(Message_oneof_Type::preprepare(v)) => v,
                _ => panic!(),
            }
        } else {
            Preprepare::new()
        }
    }

    // .proto.Prepare prepare = 4;


    pub fn get_prepare(&self) -> &Prepare {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::prepare(ref v)) => v,
            _ => Prepare::default_instance(),
        }
    }
    pub fn clear_prepare(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_prepare(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::prepare(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prepare(&mut self, v: Prepare) {
        self.Type = ::std::option::Option::Some(Message_oneof_Type::prepare(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prepare(&mut self) -> &mut Prepare {
        if let ::std::option::Option::Some(Message_oneof_Type::prepare(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(Message_oneof_Type::prepare(Prepare::new()));
        }
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::prepare(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prepare(&mut self) -> Prepare {
        if self.has_prepare() {
            match self.Type.take() {
                ::std::option::Option::Some(Message_oneof_Type::prepare(v)) => v,
                _ => panic!(),
            }
        } else {
            Prepare::new()
        }
    }

    // .proto.Commit commit = 5;


    pub fn get_commit(&self) -> &Commit {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::commit(ref v)) => v,
            _ => Commit::default_instance(),
        }
    }
    pub fn clear_commit(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_commit(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::commit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: Commit) {
        self.Type = ::std::option::Option::Some(Message_oneof_Type::commit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit(&mut self) -> &mut Commit {
        if let ::std::option::Option::Some(Message_oneof_Type::commit(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(Message_oneof_Type::commit(Commit::new()));
        }
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::commit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit(&mut self) -> Commit {
        if self.has_commit() {
            match self.Type.take() {
                ::std::option::Option::Some(Message_oneof_Type::commit(v)) => v,
                _ => panic!(),
            }
        } else {
            Commit::new()
        }
    }

    // .proto.Checkpoint checkpoint = 6;


    pub fn get_checkpoint(&self) -> &Checkpoint {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::checkpoint(ref v)) => v,
            _ => Checkpoint::default_instance(),
        }
    }
    pub fn clear_checkpoint(&mut self) {
        self.Type = ::std::option::Option::None;
    }

    pub fn has_checkpoint(&self) -> bool {
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::checkpoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_checkpoint(&mut self, v: Checkpoint) {
        self.Type = ::std::option::Option::Some(Message_oneof_Type::checkpoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_checkpoint(&mut self) -> &mut Checkpoint {
        if let ::std::option::Option::Some(Message_oneof_Type::checkpoint(_)) = self.Type {
        } else {
            self.Type = ::std::option::Option::Some(Message_oneof_Type::checkpoint(Checkpoint::new()));
        }
        match self.Type {
            ::std::option::Option::Some(Message_oneof_Type::checkpoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_checkpoint(&mut self) -> Checkpoint {
        if self.has_checkpoint() {
            match self.Type.take() {
                ::std::option::Option::Some(Message_oneof_Type::checkpoint(v)) => v,
                _ => panic!(),
            }
        } else {
            Checkpoint::new()
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        if let Some(Message_oneof_Type::proposal(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Type::forward(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Type::preprepare(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Type::prepare(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Type::commit(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Type::checkpoint(ref v)) = self.Type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(Message_oneof_Type::proposal(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(Message_oneof_Type::forward(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(Message_oneof_Type::preprepare(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(Message_oneof_Type::prepare(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(Message_oneof_Type::commit(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Type = ::std::option::Option::Some(Message_oneof_Type::checkpoint(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.Type {
            match v {
                &Message_oneof_Type::proposal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Type::forward(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Type::preprepare(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Type::prepare(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Type::commit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Type::checkpoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.Type {
            match v {
                &Message_oneof_Type::proposal(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Type::forward(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Type::preprepare(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Type::prepare(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Type::commit(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Type::checkpoint(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Proposal>(
                    "proposal",
                    Message::has_proposal,
                    Message::get_proposal,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Forward>(
                    "forward",
                    Message::has_forward,
                    Message::get_forward,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Preprepare>(
                    "preprepare",
                    Message::has_preprepare,
                    Message::get_preprepare,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Prepare>(
                    "prepare",
                    Message::has_prepare,
                    Message::get_prepare,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Commit>(
                    "commit",
                    Message::has_commit,
                    Message::get_commit,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Checkpoint>(
                    "checkpoint",
                    Message::has_checkpoint,
                    Message::get_checkpoint,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.Type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Proposal {
    // message fields
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Proposal {
    fn default() -> &'a Proposal {
        <Proposal as ::protobuf::Message>::default_instance()
    }
}

impl Proposal {
    pub fn new() -> Proposal {
        ::std::default::Default::default()
    }

    // bytes payload = 1;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Proposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Proposal {
        Proposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &Proposal| { &m.payload },
                    |m: &mut Proposal| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Proposal>(
                    "Proposal",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Proposal {
        static mut instance: ::protobuf::lazy::Lazy<Proposal> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Proposal,
        };
        unsafe {
            instance.get(Proposal::new)
        }
    }
}

impl ::protobuf::Clear for Proposal {
    fn clear(&mut self) {
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Proposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proposal {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Forward {
    // message fields
    pub epoch: u64,
    pub bucket: u64,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Forward {
    fn default() -> &'a Forward {
        <Forward as ::protobuf::Message>::default_instance()
    }
}

impl Forward {
    pub fn new() -> Forward {
        ::std::default::Default::default()
    }

    // uint64 epoch = 1;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint64 bucket = 2;


    pub fn get_bucket(&self) -> u64 {
        self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket = 0;
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: u64) {
        self.bucket = v;
    }

    // bytes payload = 3;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Forward {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bucket = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bucket != 0 {
            my_size += ::protobuf::rt::value_size(2, self.bucket, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.epoch != 0 {
            os.write_uint64(1, self.epoch)?;
        }
        if self.bucket != 0 {
            os.write_uint64(2, self.bucket)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(3, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Forward {
        Forward::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &Forward| { &m.epoch },
                    |m: &mut Forward| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "bucket",
                    |m: &Forward| { &m.bucket },
                    |m: &mut Forward| { &mut m.bucket },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &Forward| { &m.payload },
                    |m: &mut Forward| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Forward>(
                    "Forward",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Forward {
        static mut instance: ::protobuf::lazy::Lazy<Forward> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Forward,
        };
        unsafe {
            instance.get(Forward::new)
        }
    }
}

impl ::protobuf::Clear for Forward {
    fn clear(&mut self) {
        self.epoch = 0;
        self.bucket = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Forward {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Forward {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Preprepare {
    // message fields
    pub seq_no: u64,
    pub epoch: u64,
    pub bucket: u64,
    pub batch: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Preprepare {
    fn default() -> &'a Preprepare {
        <Preprepare as ::protobuf::Message>::default_instance()
    }
}

impl Preprepare {
    pub fn new() -> Preprepare {
        ::std::default::Default::default()
    }

    // uint64 seq_no = 1;


    pub fn get_seq_no(&self) -> u64 {
        self.seq_no
    }
    pub fn clear_seq_no(&mut self) {
        self.seq_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: u64) {
        self.seq_no = v;
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint64 bucket = 3;


    pub fn get_bucket(&self) -> u64 {
        self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket = 0;
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: u64) {
        self.bucket = v;
    }

    // repeated bytes batch = 4;


    pub fn get_batch(&self) -> &[::std::vec::Vec<u8>] {
        &self.batch
    }
    pub fn clear_batch(&mut self) {
        self.batch.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.batch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.batch
    }

    // Take field
    pub fn take_batch(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.batch, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Preprepare {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_no = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bucket = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.batch)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seq_no != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seq_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bucket != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bucket, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.batch {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.seq_no != 0 {
            os.write_uint64(1, self.seq_no)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if self.bucket != 0 {
            os.write_uint64(3, self.bucket)?;
        }
        for v in &self.batch {
            os.write_bytes(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Preprepare {
        Preprepare::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq_no",
                    |m: &Preprepare| { &m.seq_no },
                    |m: &mut Preprepare| { &mut m.seq_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &Preprepare| { &m.epoch },
                    |m: &mut Preprepare| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "bucket",
                    |m: &Preprepare| { &m.bucket },
                    |m: &mut Preprepare| { &mut m.bucket },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "batch",
                    |m: &Preprepare| { &m.batch },
                    |m: &mut Preprepare| { &mut m.batch },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Preprepare>(
                    "Preprepare",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Preprepare {
        static mut instance: ::protobuf::lazy::Lazy<Preprepare> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Preprepare,
        };
        unsafe {
            instance.get(Preprepare::new)
        }
    }
}

impl ::protobuf::Clear for Preprepare {
    fn clear(&mut self) {
        self.seq_no = 0;
        self.epoch = 0;
        self.bucket = 0;
        self.batch.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Preprepare {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Preprepare {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Prepare {
    // message fields
    pub seq_no: u64,
    pub epoch: u64,
    pub bucket: u64,
    pub digest: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Prepare {
    fn default() -> &'a Prepare {
        <Prepare as ::protobuf::Message>::default_instance()
    }
}

impl Prepare {
    pub fn new() -> Prepare {
        ::std::default::Default::default()
    }

    // uint64 seq_no = 1;


    pub fn get_seq_no(&self) -> u64 {
        self.seq_no
    }
    pub fn clear_seq_no(&mut self) {
        self.seq_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: u64) {
        self.seq_no = v;
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint64 bucket = 3;


    pub fn get_bucket(&self) -> u64 {
        self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket = 0;
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: u64) {
        self.bucket = v;
    }

    // bytes digest = 4;


    pub fn get_digest(&self) -> &[u8] {
        &self.digest
    }
    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: ::std::vec::Vec<u8>) {
        self.digest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.digest
    }

    // Take field
    pub fn take_digest(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.digest, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Prepare {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_no = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bucket = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seq_no != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seq_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bucket != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bucket, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.digest);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.seq_no != 0 {
            os.write_uint64(1, self.seq_no)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if self.bucket != 0 {
            os.write_uint64(3, self.bucket)?;
        }
        if !self.digest.is_empty() {
            os.write_bytes(4, &self.digest)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Prepare {
        Prepare::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq_no",
                    |m: &Prepare| { &m.seq_no },
                    |m: &mut Prepare| { &mut m.seq_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &Prepare| { &m.epoch },
                    |m: &mut Prepare| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "bucket",
                    |m: &Prepare| { &m.bucket },
                    |m: &mut Prepare| { &mut m.bucket },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "digest",
                    |m: &Prepare| { &m.digest },
                    |m: &mut Prepare| { &mut m.digest },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Prepare>(
                    "Prepare",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Prepare {
        static mut instance: ::protobuf::lazy::Lazy<Prepare> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Prepare,
        };
        unsafe {
            instance.get(Prepare::new)
        }
    }
}

impl ::protobuf::Clear for Prepare {
    fn clear(&mut self) {
        self.seq_no = 0;
        self.epoch = 0;
        self.bucket = 0;
        self.digest.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Prepare {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Prepare {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Commit {
    // message fields
    pub seq_no: u64,
    pub epoch: u64,
    pub bucket: u64,
    pub digest: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Commit {
    fn default() -> &'a Commit {
        <Commit as ::protobuf::Message>::default_instance()
    }
}

impl Commit {
    pub fn new() -> Commit {
        ::std::default::Default::default()
    }

    // uint64 seq_no = 1;


    pub fn get_seq_no(&self) -> u64 {
        self.seq_no
    }
    pub fn clear_seq_no(&mut self) {
        self.seq_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: u64) {
        self.seq_no = v;
    }

    // uint64 epoch = 2;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // uint64 bucket = 3;


    pub fn get_bucket(&self) -> u64 {
        self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket = 0;
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: u64) {
        self.bucket = v;
    }

    // bytes digest = 4;


    pub fn get_digest(&self) -> &[u8] {
        &self.digest
    }
    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: ::std::vec::Vec<u8>) {
        self.digest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.digest
    }

    // Take field
    pub fn take_digest(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.digest, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Commit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_no = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bucket = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seq_no != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seq_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(2, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bucket != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bucket, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.digest);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.seq_no != 0 {
            os.write_uint64(1, self.seq_no)?;
        }
        if self.epoch != 0 {
            os.write_uint64(2, self.epoch)?;
        }
        if self.bucket != 0 {
            os.write_uint64(3, self.bucket)?;
        }
        if !self.digest.is_empty() {
            os.write_bytes(4, &self.digest)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Commit {
        Commit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq_no",
                    |m: &Commit| { &m.seq_no },
                    |m: &mut Commit| { &mut m.seq_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &Commit| { &m.epoch },
                    |m: &mut Commit| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "bucket",
                    |m: &Commit| { &m.bucket },
                    |m: &mut Commit| { &mut m.bucket },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "digest",
                    |m: &Commit| { &m.digest },
                    |m: &mut Commit| { &mut m.digest },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Commit>(
                    "Commit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Commit {
        static mut instance: ::protobuf::lazy::Lazy<Commit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Commit,
        };
        unsafe {
            instance.get(Commit::new)
        }
    }
}

impl ::protobuf::Clear for Commit {
    fn clear(&mut self) {
        self.seq_no = 0;
        self.epoch = 0;
        self.bucket = 0;
        self.digest.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Commit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Checkpoint {
    // message fields
    pub seq_no: u64,
    pub value: ::std::vec::Vec<u8>,
    pub attestation: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Checkpoint {
    fn default() -> &'a Checkpoint {
        <Checkpoint as ::protobuf::Message>::default_instance()
    }
}

impl Checkpoint {
    pub fn new() -> Checkpoint {
        ::std::default::Default::default()
    }

    // uint64 seq_no = 1;


    pub fn get_seq_no(&self) -> u64 {
        self.seq_no
    }
    pub fn clear_seq_no(&mut self) {
        self.seq_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: u64) {
        self.seq_no = v;
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // bytes attestation = 3;


    pub fn get_attestation(&self) -> &[u8] {
        &self.attestation
    }
    pub fn clear_attestation(&mut self) {
        self.attestation.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation
    }

    // Take field
    pub fn take_attestation(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Checkpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_no = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seq_no != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seq_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if !self.attestation.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.attestation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.seq_no != 0 {
            os.write_uint64(1, self.seq_no)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if !self.attestation.is_empty() {
            os.write_bytes(3, &self.attestation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Checkpoint {
        Checkpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "seq_no",
                    |m: &Checkpoint| { &m.seq_no },
                    |m: &mut Checkpoint| { &mut m.seq_no },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &Checkpoint| { &m.value },
                    |m: &mut Checkpoint| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "attestation",
                    |m: &Checkpoint| { &m.attestation },
                    |m: &mut Checkpoint| { &mut m.attestation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Checkpoint>(
                    "Checkpoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Checkpoint {
        static mut instance: ::protobuf::lazy::Lazy<Checkpoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Checkpoint,
        };
        unsafe {
            instance.get(Checkpoint::new)
        }
    }
}

impl ::protobuf::Clear for Checkpoint {
    fn clear(&mut self) {
        self.seq_no = 0;
        self.value.clear();
        self.attestation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Checkpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Checkpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cmirbft.proto\x12\x05proto\"\xab\x02\n\x07Message\x12-\n\x08proposa\
    l\x18\x01\x20\x01(\x0b2\x0f.proto.ProposalH\0R\x08proposal\x12*\n\x07for\
    ward\x18\x02\x20\x01(\x0b2\x0e.proto.ForwardH\0R\x07forward\x123\n\nprep\
    repare\x18\x03\x20\x01(\x0b2\x11.proto.PreprepareH\0R\npreprepare\x12*\n\
    \x07prepare\x18\x04\x20\x01(\x0b2\x0e.proto.PrepareH\0R\x07prepare\x12'\
    \n\x06commit\x18\x05\x20\x01(\x0b2\r.proto.CommitH\0R\x06commit\x123\n\n\
    checkpoint\x18\x06\x20\x01(\x0b2\x11.proto.CheckpointH\0R\ncheckpointB\
    \x06\n\x04Type\"$\n\x08Proposal\x12\x18\n\x07payload\x18\x01\x20\x01(\
    \x0cR\x07payload\"Q\n\x07Forward\x12\x14\n\x05epoch\x18\x01\x20\x01(\x04\
    R\x05epoch\x12\x16\n\x06bucket\x18\x02\x20\x01(\x04R\x06bucket\x12\x18\n\
    \x07payload\x18\x03\x20\x01(\x0cR\x07payload\"g\n\nPreprepare\x12\x15\n\
    \x06seq_no\x18\x01\x20\x01(\x04R\x05seqNo\x12\x14\n\x05epoch\x18\x02\x20\
    \x01(\x04R\x05epoch\x12\x16\n\x06bucket\x18\x03\x20\x01(\x04R\x06bucket\
    \x12\x14\n\x05batch\x18\x04\x20\x03(\x0cR\x05batch\"f\n\x07Prepare\x12\
    \x15\n\x06seq_no\x18\x01\x20\x01(\x04R\x05seqNo\x12\x14\n\x05epoch\x18\
    \x02\x20\x01(\x04R\x05epoch\x12\x16\n\x06bucket\x18\x03\x20\x01(\x04R\
    \x06bucket\x12\x16\n\x06digest\x18\x04\x20\x01(\x0cR\x06digest\"e\n\x06C\
    ommit\x12\x15\n\x06seq_no\x18\x01\x20\x01(\x04R\x05seqNo\x12\x14\n\x05ep\
    och\x18\x02\x20\x01(\x04R\x05epoch\x12\x16\n\x06bucket\x18\x03\x20\x01(\
    \x04R\x06bucket\x12\x16\n\x06digest\x18\x04\x20\x01(\x0cR\x06digest\"[\n\
    \nCheckpoint\x12\x15\n\x06seq_no\x18\x01\x20\x01(\x04R\x05seqNo\x12\x14\
    \n\x05value\x18\x02\x20\x01(\x0cR\x05value\x12\x20\n\x0battestation\x18\
    \x03\x20\x01(\x0cR\x0battestationb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
